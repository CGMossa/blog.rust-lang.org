<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-02-26T21:57:23Z</updated>

    
    <entry>
        <title>crates.io incident report for 2020-02-20</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/26/crates-io-incident-report.html" type="text/html" title="crates.io incident report for 2020-02-20" />
        <published>2020-02-26T00:00:00Z</published>
        <updated>2020-02-26T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/26/crates-io-incident-report.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/26/crates-io-incident-report.html">&lt;p&gt;On 2020-02-20 at 21:28 UTC we received a report from a user of crates.io that
their crate was not available on the index even after 10 minutes since the
upload. This was a bug in the crates.io webapp exposed by a GitHub outage.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#root-cause-of-the-outage&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;root-cause-of-the-outage&quot;&gt;&lt;/a&gt;Root cause of the outage&lt;/h2&gt;
&lt;p&gt;In some corner cases the code that uploads new commits to the GitHub repository
of the index was returning a successful status even though the push itself
failed. The bug caused the job scheduler to think the upload was actually
successful, causing the job to be removed from the queue and producing a data
loss.&lt;/p&gt;
&lt;p&gt;The outage was caused by that bug, triggered by an unexpected response during
&lt;a href=&quot;https://www.githubstatus.com/incidents/bd29l6zgr43g&quot;&gt;the GitHub outage&lt;/a&gt; happening at the same time.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#resolution&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;resolution&quot;&gt;&lt;/a&gt;Resolution&lt;/h2&gt;
&lt;p&gt;The team analyzed the code of the background job uploading commits to the
index, and found a possible cause of the misreported success. A team member
&lt;a href=&quot;https://github.com/rust-lang/crates.io/pull/2207&quot;&gt;wrote the fix&lt;/a&gt;, another one reviewed it and we then deployed the patch
directly to production.&lt;/p&gt;
&lt;p&gt;At the same time, once we saw the index started to be updated again, we removed
the broken entries in the database manually and asked the reporter to upload
their crates again.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#affected-crates&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;affected-crates&quot;&gt;&lt;/a&gt;Affected crates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crates.io/crates/kaze&quot;&gt;&lt;code&gt;kaze&lt;/code&gt;&lt;/a&gt; 0.1.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crates.io/crates/wasmer-runtime-core&quot;&gt;&lt;code&gt;wasmer-runtime-core&lt;/code&gt;&lt;/a&gt; 0.14.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crates.io/crates/wasmer-win-exception-handler&quot;&gt;&lt;code&gt;wasmer-win-exception-handler&lt;/code&gt;&lt;/a&gt; 0.14.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#postmortem&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;postmortem&quot;&gt;&lt;/a&gt;Postmortem&lt;/h2&gt;
&lt;p&gt;Deploying the change took way longer than expected: there were changes landed
in master but waiting to be deployed on production, increasing the length of
the build process and the risks of the deploy. In the future we should deploy
hotfixes by branching off the current deployed commit, and cherry-picking the
fix on top of that. We should also strive to reduce the amount of time PRs sit
in master without being live.&lt;/p&gt;
&lt;p&gt;Nobody was paged due to this incident, as our monitoring and alerting system
wasn’t able to catch the problem: we have monitoring in place for jobs failing
to execute, but in this case the job was mistakenly marked as correct. We
should implement periodic checks that ensure the database and the index are
correctly synchronized.&lt;/p&gt;
&lt;p&gt;We were lucky that two members of the team with access to both the support
email and the production environment were online during the outage: without
paging available we could’ve noticed it way later than we did.&lt;/p&gt;
&lt;p&gt;During the incident investigation we also found that our logging was not good
enough to properly diagnose the problem: there is no message logged when a
commit is pushed to the index, nor when a background job is executed. Also, the
API call to publish new crates doesn’t include the crate name in its line. We
should enhance our logging capabilities to find the root cause of issues
quickly during future incidents.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#timeline-of-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;timeline-of-events&quot;&gt;&lt;/a&gt;Timeline of events&lt;/h2&gt;
&lt;p&gt;It took 1 hour and 31 minutes from the start of the incident to the deploy of
the fix.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#2020-02-20&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-02-20&quot;&gt;&lt;/a&gt;2020-02-20&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;21:17 UTC: the authors of &lt;code&gt;kaze&lt;/code&gt;, &lt;code&gt;wasmer-runtime-core&lt;/code&gt;
and &lt;code&gt;wasmer-win-exception-handler&lt;/code&gt; published them on crates.io&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;21:28 UTC: the author of &lt;code&gt;wasmer-runtime-core&lt;/code&gt; and
&lt;code&gt;wasmer-win-exception-handler&lt;/code&gt; reports the issue to help@crates.io&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;21:31 UTC: GitHub updates their status page to report an outage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;21:33 UTC: Pietro notices the support mail, pings Sean on Discord, Sean
starts investigating&lt;/li&gt;
&lt;li&gt;21:35 UTC: Pietro got back to the author saying that the team was
investigating&lt;/li&gt;
&lt;li&gt;21:37 UTC: Sean and Pietro find the symptoms of the incident&lt;/li&gt;
&lt;li&gt;21:50 UTC: Sean finds a possible cause for the bug&lt;/li&gt;
&lt;li&gt;22:01 UTC: Sean deletes the affected versions from the database&lt;/li&gt;
&lt;li&gt;22:09 UTC: Sean opens up &lt;a href=&quot;https://github.com/rust-lang/crates.io/pull/2207&quot;&gt;PR 2207&lt;/a&gt; with the fix&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;22:16 UTC: GitHub updates their status page to say the problem is fixed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;22:17 UTC: Pietro asks for changes on the PR&lt;/li&gt;
&lt;li&gt;22:20 UTC: Sean addresses Pietro’s concerns in the PR&lt;/li&gt;
&lt;li&gt;22:23 UTC: PR merged, Sean deploys it directly to master&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;22:48 UTC: Fix deployed on production&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#2020-02-21&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-02-21&quot;&gt;&lt;/a&gt;2020-02-21&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;09:27 UTC: the author of &lt;code&gt;kaze&lt;/code&gt; reports their crate was affected to
help@crates.io&lt;/li&gt;
&lt;li&gt;12:55 UTC: Pietro deletes the affected version of &lt;code&gt;kaze&lt;/code&gt; from the database
and gets back to the author of the crate&lt;/li&gt;
&lt;li&gt;14:10 UTC: Pietro analyzes the crates.io database and finds out no other
crate was affected&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#action-items&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;action-items&quot;&gt;&lt;/a&gt;Action items&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/crates.io/issues/2226&quot;&gt;#2226&lt;/a&gt;: Add simple logging when we start the index publishing process.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/crates.io/issues/2227&quot;&gt;#2227&lt;/a&gt;: Add a periodic job that checks the index and the database for
consistency, paging the on-call person if there are any mismatches. The job
will need to account for the crates not yet published on the index but in the
queue.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/crates.io/issues/2228&quot;&gt;#2228&lt;/a&gt;: Include the crate name in the HTTP log entry for the publish API
call.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/crates.io/issues/2229&quot;&gt;#2229&lt;/a&gt;: Add in-depth logging for swirl background jobs, with information
such as the job name or the parameters.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/crates.io/issues/2230&quot;&gt;#2230&lt;/a&gt;: Investigate whether we want to implement a self-healing feature to
automatically synchronize the index in cases of mismatch.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Intro to rustc's self profiler</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html" type="text/html" title="Intro to rustc's self profiler" />
        <published>2020-02-25T00:00:00Z</published>
        <updated>2020-02-25T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html">&lt;p&gt;Over the last year, the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/self-profile/&quot;&gt;Self-Profile Working Group&lt;/a&gt; has been building tools to profile &lt;code&gt;rustc&lt;/code&gt; because we often hear requests to know where compilation time is being spent.
This is useful when optimizing the compiler, one of the Compiler Team's ongoing efforts to improve compile times, but it's also useful to users who want to refactor their crate so that it will compile faster.
We've been working on a new feature that will help with that and this blog post gives a preview of how it works.
Be warned, though: it is still experimental and we expect the interface to change over time.
The Rust Unstable Book has &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/compiler-flags/self-profile.html&quot;&gt;documentation for this feature&lt;/a&gt; and we'll keep that up to date so you can always find the latest instructions there.&lt;/p&gt;
&lt;p&gt;In this post, we'll look at the tools currently available and use them to profile &lt;code&gt;rustc&lt;/code&gt; while it compiles an example crate.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#setup&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;p&gt;First, we'll install the tools we're going to use from the &lt;code&gt;measureme&lt;/code&gt; repository to analyze self-profile trace data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ cargo install --git https://github.com/rust-lang/measureme crox flamegraph summarize
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our tools, let's download an example crate to profile its build.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ cd ..
$ git clone https://github.com/rust-lang/regex.git
$ cd regex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll need to use a recent nightly compiler to get access to unstable &lt;code&gt;-Z&lt;/code&gt; flags.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ rustup override set nightly
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you haven't installed a nightly compiler before, this will download the nightly compiler for you.
If you have, then update it to make sure you're on a recent version.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ rustup update nightly
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#profiling-the-compiler&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;profiling-the-compiler&quot;&gt;&lt;/a&gt;Profiling the compiler&lt;/h2&gt;
&lt;p&gt;Now we can build it and tell &lt;code&gt;rustc&lt;/code&gt; to profile the build of the &lt;code&gt;regex&lt;/code&gt; crate.
This will cause three new files to be created in the working directory which contain the profling data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ cargo rustc -- -Zself-profile
$ ls
CHANGELOG.md        LICENSE-APACHE       UNICODE.md              regex-17088.string_data       regex-syntax         target
Cargo.lock          LICENSE-MIT          bench                   regex-17088.string_index      rustfmt.toml         test
Cargo.toml          PERFORMANCE.md       examples                regex-capi                    scripts              tests
HACKING.md          README.md            regex-17088.events      regex-debug                   src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new files follow the format &lt;code&gt;{crate name}-{rustc process id}.{events,string_data,string_index}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll use each of the three main tools to analyze the profiling data:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#summarize&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;summarize&quot;&gt;&lt;/a&gt;&lt;code&gt;summarize&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;As its name suggests, this tool summarizes the data found in the trace files.
Additionally, &lt;code&gt;summarize&lt;/code&gt; can also show a &amp;quot;diff&amp;quot; between two trace files but we won't be using this mode.&lt;/p&gt;
&lt;p&gt;Let's run the tool, passing just the file name (but not the extension) for the trace:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ summarize summarize regex-17088
+-----------------------------------------------+-----------+-----------------+----------+------------+
| Item                                          | Self time | % of total time | Time     | Item count |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| LLVM_module_codegen_emit_obj                  | 4.89s     | 42.752          | 4.89s    | 159        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| codegen_module                                | 1.25s     | 10.967          | 1.37s    | 159        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| LLVM_module_optimize_module_passes            | 1.15s     | 10.022          | 1.15s    | 159        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| LLVM_module_codegen_make_bitcode              | 786.56ms  | 6.875           | 960.73ms | 159        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| typeck_tables_of                              | 565.18ms  | 4.940           | 689.39ms | 848        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| LLVM_module_codegen                           | 408.01ms  | 3.566           | 6.26s    | 159        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| mir_borrowck                                  | 224.03ms  | 1.958           | 543.33ms | 848        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| LLVM_module_codegen_emit_compressed_bitcode   | 174.17ms  | 1.522           | 174.17ms | 159        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| optimized_mir                                 | 157.91ms  | 1.380           | 205.29ms | 1996       |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| evaluate_obligation                           | 146.50ms  | 1.281           | 184.17ms | 8304       |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| codegen_crate                                 | 139.48ms  | 1.219           | 1.58s    | 1          |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| mir_built                                     | 123.88ms  | 1.083           | 168.01ms | 848        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| metadata_decode_entry                         | 88.36ms   | 0.772           | 117.77ms | 55642      |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| incr_comp_copy_cgu_workproducts               | 64.21ms   | 0.561           | 64.21ms  | 1          |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| monomorphization_collector_graph_walk         | 54.11ms   | 0.473           | 344.00ms | 1          |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| link_rlib                                     | 43.21ms   | 0.378           | 43.21ms  | 1          |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| check_impl_item_well_formed                   | 41.36ms   | 0.362           | 77.14ms  | 736        |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| codegen_fulfill_obligation                    | 40.36ms   | 0.353           | 51.56ms  | 1759       |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| expand_crate                                  | 37.24ms   | 0.326           | 48.52ms  | 1          |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| symbol_name                                   | 36.31ms   | 0.317           | 39.06ms  | 5513       |
+-----------------------------------------------+-----------+-----------------+----------+------------+
| free_global_ctxt                              | 34.34ms   | 0.300           | 34.34ms  | 1          |
+-----------------------------------------------+-----------+-----------------+----------+------------+
...
Total cpu time: 11.440758871s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is sorted by the self time (time spent in the query or activity but not other queries or activities called by itself).
As you can see, most of the compilation time is spent in LLVM generating the binary code for the executable.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#flamegraph&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;flamegraph&quot;&gt;&lt;/a&gt;&lt;code&gt;flamegraph&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;As you may have guessed, &lt;code&gt;flamegraph&lt;/code&gt; will produce a &lt;a href=&quot;http://www.brendangregg.com/flamegraphs.html&quot;&gt;flame graph&lt;/a&gt; of the profiling data.
To run the tool, we'll pass just the filename without a file extension like we did for &lt;code&gt;summarize&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ flamegraph regex-17088
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a file called &lt;code&gt;rustc.svg&lt;/code&gt; in the working directory:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/flamegraph_image.png&quot;&gt;&lt;img src=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/flamegraph_image.png&quot; alt=&quot;Image of flamegraph output&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/rustc.svg&quot;&gt;Click here&lt;/a&gt; to try the interactive svg.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#crox&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;crox&quot;&gt;&lt;/a&gt;&lt;code&gt;crox&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This tool processes self-profiling data into the JSON format that the Chromium profiler understands.
You can use it to create a graphical timeline showing exactly when various traced events occurred.&lt;/p&gt;
&lt;p&gt;In this section, we'll cover a few different modes &lt;code&gt;crox&lt;/code&gt; can run in such as profiling an entire crate compilation including dependencies and filtering out small events.
Let's get started with the basics!&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#basic-usage&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;basic-usage&quot;&gt;&lt;/a&gt;Basic usage&lt;/h4&gt;
&lt;p&gt;To run the tool, we'll just pass the filename without a file extension like we've done before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ crox regex-17088
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a file called &lt;code&gt;chrome_profiler.json&lt;/code&gt; in the working directory.
To open it, we'll use the regular Chromium performance tools you might already be familiar with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Chrome&lt;/li&gt;
&lt;li&gt;Open the Developer Tools console by pressing &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;i&lt;/code&gt; (Windows/Linux) or &lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;Option&lt;/code&gt; + &lt;code&gt;i&lt;/code&gt; (macOS)&lt;/li&gt;
&lt;li&gt;Click the Performance tab at the top of the console.&lt;/li&gt;
&lt;li&gt;Click the &amp;quot;Load profile&amp;quot; button which looks like an arrow pointing up.&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;chrome_profiler.json&lt;/code&gt; file we created.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should now see something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler1.png&quot;&gt;&lt;img src=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler1.png&quot; alt=&quot;Image of chrome profiler&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use the scroll wheel on a mouse or the appropriate gesture on a touchpad to zoom in or out of the timeline.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#filtering-short-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;filtering-short-events&quot;&gt;&lt;/a&gt;Filtering short events&lt;/h4&gt;
&lt;p&gt;If the &lt;code&gt;chrome_profiler.json&lt;/code&gt; file gets too large, the normal Chromium performance tools have issues opening the file.
One easy way to deal with this is to tell &lt;code&gt;crox&lt;/code&gt; to remove events shorter than a chosen duration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ crox --minimum-duration 2 regex-17088
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Filtering out events less than 2 microseconds shrinks our &lt;code&gt;chrome_profiler.js&lt;/code&gt; file from 27mb to 11mb.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#capturing-event-arguments&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;capturing-event-arguments&quot;&gt;&lt;/a&gt;Capturing event arguments&lt;/h4&gt;
&lt;p&gt;The self-profiler can be configured to record event arguments during compilation.
For example, queries will include their query key.
This functionality is turned off by default because it increases the self-profiler overhead.&lt;/p&gt;
&lt;p&gt;To turn this feature on, we'll need to record a new compilation, passing an additional argument to &lt;code&gt;rustc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ cargo clean
$ cargo rustc -- -Zself-profile -Zself-profile-events=default,args
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then process the new output files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ crox regex-23649
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in the Chromium profiler, if you click on a node, you can see additional data about many of the events at the bottom of the screen:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler2.png&quot;&gt;&lt;img src=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler2.png&quot; alt=&quot;Image of Chrome profiler details&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which shows this &lt;code&gt;optimized_mir&lt;/code&gt; query was processing the &lt;code&gt;regex::compile::{{impl}}::new&lt;/code&gt; function body.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#profiling-an-entire-crate-graph&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;profiling-an-entire-crate-graph&quot;&gt;&lt;/a&gt;Profiling an entire crate graph&lt;/h4&gt;
&lt;p&gt;By using the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable, we can profile every &lt;code&gt;rustc&lt;/code&gt; invocation, not just the final crate's.
&lt;code&gt;crox&lt;/code&gt; can then combine all of the profiles together into one output file.
Since this will create a lot of files, we'll first create a folder to put all the traces in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ rm regex-17088.* regex-23649.* # clean up the old trace files since we're done with them
$ mkdir profiles
$ cargo clean
$ RUSTFLAGS=&amp;quot;-Zself-profile=./profiles -Zself-profile-events=default,args&amp;quot; cargo build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates quite a few trace files in the working directory.
Now, we'll tell &lt;code&gt;crox&lt;/code&gt; to combine all of the trace files in the current directory together:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ crox --dir .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Opening this file shows all of the crates compiled:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png&quot;&gt;&lt;img src=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png&quot; alt=&quot;Image of Chrome profiler with all crates&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clicking on a crate will expand it to show the threads and event data inside it:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler4.png&quot;&gt;&lt;img src=&quot;/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler4.png&quot; alt=&quot;Image of Chrome profiler with a crate expanded&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;p&gt;We've been using these tools extensively ourselves over the last few months and they've helped us tremendously in understanding where the compiler spends its time.
In the future we'll be adding more features and we'll work on making the tooling easier to use.
If you have questions or would like to get involved with the Self-Profile Working Group, please check out the &lt;a href=&quot;https://github.com/rust-lang/measureme&quot;&gt;measureme repository&lt;/a&gt; or stop by our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/187831-t-compiler.2Fwg-self-profile&quot;&gt;Zulip stream&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Please welcome jtgeibel as crates.io team co-lead!</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/20/jtgeibel-crates-io-co-lead.html" type="text/html" title="Please welcome jtgeibel as crates.io team co-lead!" />
        <published>2020-02-20T00:00:00Z</published>
        <updated>2020-02-20T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/20/jtgeibel-crates-io-co-lead.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/20/jtgeibel-crates-io-co-lead.html">&lt;p&gt;I'm happy to announce some changes in the leadership of the crates.io
team. Justin Geibel (&lt;a href=&quot;https://github.com/jtgeibel&quot;&gt;jtgeibel&lt;/a&gt;) will be joining me as co-lead. Justin
will be replacing Ashley Williams, who has been very busy lately with
other commitments.&lt;/p&gt;
&lt;p&gt;Justin has been involved in the crates.io team since the summer
of 2017. In addition to general &amp;quot;gardening&amp;quot; tasks (Justin has &lt;a href=&quot;https://github.com/rust-lang/crates.io/pulls/jtgeibel&quot;&gt;over
140 PRs&lt;/a&gt; to the
crates.io repo!), he has made a number of improvements and changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring of error handling logic and the test harness&lt;/li&gt;
&lt;li&gt;CI improvements to caching behavior and build times&lt;/li&gt;
&lt;li&gt;Added a boot time option to use hyper as the web server, with the goal of eventually switching over in production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please join me in extending a sincere congratulations 🎉 to Justin, as
well as a big thank you ❤️ to Ashley for all of the work she did
as co-lead of the team thus far.&lt;/p&gt;
</content>

        <author>
            <name>Sean Griffin</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/14/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-02-14T00:00:00Z</published>
        <updated>2020-02-14T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/14/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/14/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/131828tcompiler/33384planningmeeting20200214.html&quot;&gt;planning meeting on February 14th&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Feb 28th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NXY1bWhwYm1tMzRydDNwaWc5dmJjdGNiM3QgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;, we will discuss our triage
procedures and how we can make them more efficient. See
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/247&quot;&gt;rust-lang/compiler-team#247&lt;/a&gt; for more details.&lt;/li&gt;
&lt;li&gt;On Mar 6th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MXBkOXZtcWxyaTk4bHFpN202bTE5bTg0OWsgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss plans to extract
rustc's representation of types and trait solving into a standalone
library. See &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/234&quot;&gt;rust-lang/compiler-team#234&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 11 February 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/11/Goverance-wg.html" type="text/html" title="Governance Working Group Update: Meeting 11 February 2020" />
        <published>2020-02-11T00:00:00Z</published>
        <updated>2020-02-11T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/11/Goverance-wg.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/11/Goverance-wg.html">&lt;p&gt;Hello everyone!&lt;/p&gt;
&lt;p&gt;The governance working group meeting of January 28th was canceled due to the Mozilla All Hands that week.
Therefore, working group next convened on 11 February.
The following meeting will take place on 27 February.&lt;/p&gt;
&lt;p&gt;The agenda included&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Discuss project groups description RFC
https://github.com/rust-lang/rfcs/pull/2856
Decision: Determine if inactive members in scope; if not in scope, confirm RFC.&lt;/li&gt;
&lt;li&gt;Review action items from meeting of December 3 2019
https://github.com/rust-lang/wg-governance/blob/master/minutes/2019.12.03.md#action-items&lt;/li&gt;
&lt;li&gt;Confirm adjustment of timeslot based on Doodle sent out in Discord channel&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&quot;#project-groups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-groups&quot;&gt;&lt;/a&gt;Project groups&lt;/h2&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.02.11.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project groups description RFC confirmed complete&lt;/li&gt;
&lt;li&gt;Next items taken from Dec 3 backlog are access policy (NellShamrell is working on this),
Discussion of where to discuss the pre-RFC process, and followup about moving (community, devtools, nursery) to rust-lang&lt;/li&gt;
&lt;li&gt;XAMPPRocky is already working on a compliance bot to simplify administration&lt;/li&gt;
&lt;li&gt;Timeslot adjusted to 19-20 CET / 1pm-2pm EST / 10-11am PST on Zulip as text chat, with the same biweekly cadence.
Zoom (video) meetings will be used as needed, e.g. if a big RFC needs to be pushed through.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;p&gt;Our next meeting will be 27 February 2020 via Zulip 19-20 CET / 1pm-2pm EST / 10-11am PST.
Agenda is -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access policy - Nell will have something to discuss&lt;/li&gt;
&lt;li&gt;Pre-RFC process - determine right place to talk about this&lt;/li&gt;
&lt;li&gt;Follow-up on moving (community, devtools, nursery) to rust-lang&lt;/li&gt;
&lt;/ol&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>2020-02-06 Compiler Team Triage Meeting</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/07/compiler-team-meeting.html" type="text/html" title="2020-02-06 Compiler Team Triage Meeting" />
        <published>2020-02-07T00:00:00Z</published>
        <updated>2020-02-07T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/07/compiler-team-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/07/compiler-team-meeting.html">&lt;p&gt;The compiler team had our weekly triage meeting on 2020-02-06.
You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/triage-meeting/2020-02-06/&quot;&gt;minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/compiler-team&quot;&gt;compiler-team repository&lt;/a&gt;.
Each week, we have general announcements from the team followed by check-ins from two of the compiler team working groups.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#announcements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;announcements&quot;&gt;&lt;/a&gt;Announcements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is a design meeting this Friday (2020-02-07) on &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/237&quot;&gt;parser-librarification&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/davidtwco&quot;&gt;@davidtwco&lt;/a&gt; has made progress on the polymorphization effort and has posted a &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/progress.20updates/near/187461928&quot;&gt;status update&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@mw&lt;/a&gt; has posted a major change proposal to make &lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/245&quot;&gt;incremental compilation respect the &lt;code&gt;-Ccodegen-units&lt;/code&gt; setting&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cargo report future-incompat &lt;a href=&quot;https://github.com/rust-lang/rfcs/issues/2834&quot;&gt;rfc#2834&lt;/a&gt; is on track to get an FCP merge request from the cargo team in the near future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#working-group-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;working-group-sync&quot;&gt;&lt;/a&gt;Working group sync&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-rls-20&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-rls-20&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/&quot;&gt;wg-rls-2.0&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Chalk dependency has been updated which dramatically reduced crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cargo check&lt;/code&gt; handling has been moved ino the server so all editors not just VS Code benefit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matklad&quot;&gt;@matklad&lt;/a&gt; and &lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;@nikomatsakis&lt;/a&gt; have been working on an RFC to merge RLS and Rust Analyzer officially.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work is proceeding on &amp;quot;production readiness&amp;quot;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary releases are available on the project's GitHub page.&lt;/li&gt;
&lt;li&gt;Planning to publish to VS Code extension marketplace &amp;quot;soon&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-self-profile&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-self-profile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://rust-lang.github.io/compiler-team/working-groups/self-profile/&quot;&gt;wg-self-profile&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/rust-lang/rust/issues/58967&quot;&gt;&amp;quot;Minimum Viable Product&amp;quot;&lt;/a&gt; has been completed!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-profling is enabled for all perf.rust-lang.org runs and we automatically publish the data. (&lt;a href=&quot;https://perf.rust-lang.org/detailed-query.html?commit=3761dcd3467441f78939ccb3b341b03b6a7558d7&amp;base_commit=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea&amp;benchmark=await-call-tree-debug&amp;run_name=clean&quot;&gt;Example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelwoerister&quot;&gt;@mw&lt;/a&gt; implemented query-key recording so queries can now be attributed to individual query invocations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/rust-lang/measureme/tree/master/crox&quot;&gt;&lt;code&gt;crox&lt;/code&gt;&lt;/a&gt; utility, which generates Chromium profiler compatible trace data, can now generate profiles for entire Cargo invocations via the &lt;code&gt;--dir&lt;/code&gt; flag.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This allows inspecting various rustc processes and their individual threads on a common timeline with full query data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quite a few people have tried &lt;code&gt;-Zself-profile&lt;/code&gt; and have said they found it very useful!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing the Cleanup Crew ICE-breaker group</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html" type="text/html" title="Announcing the Cleanup Crew ICE-breaker group" />
        <published>2020-02-06T00:00:00Z</published>
        <updated>2020-02-06T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/02/06/Cleanup-Crew-ICE-breakers.html">&lt;p&gt;Following Niko Matsakis' announcement of the &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2019/10/22/LLVM-ICE-breakers.html&quot;&gt;&lt;strong&gt;LLVM ICE-breaker
group&lt;/strong&gt;&lt;/a&gt;,
I'm pleased to announce the &lt;strong&gt;Cleanup Crew ICE-breaker group&lt;/strong&gt;. It
follows the same principle, if you know Rust and would like to
contribute to rustc -- but without knowing about the compiler or taking
on a large commitment -- then the Cleanup Crew ICE-breaker group might
well be for you!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#what-is-the-cleanup-crew-ice-breaker-group&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-the-cleanup-crew-ice-breaker-group&quot;&gt;&lt;/a&gt;What is the Cleanup Crew ICE-breaker group?&lt;/h3&gt;
&lt;p&gt;The &amp;quot;Cleanup Crew&amp;quot; are focused on improving bug reports. Specifically,
the goal is to try to ensure that every bug report has all the
information that will be needed for someone to fix it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a minimal, standalone example that shows the problem&lt;/li&gt;
&lt;li&gt;links to duplicates or related bugs&lt;/li&gt;
&lt;li&gt;if the bug is a regression (something that used to work, but no
longer does), then a bisection to the PR or nightly that caused
the regression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This kind of cleanup is invaluable in getting bugs fixed.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#who-should-join&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;who-should-join&quot;&gt;&lt;/a&gt;Who should join?&lt;/h3&gt;
&lt;p&gt;It can be done by anybody who knows Rust, without any particularly deep
knowledge of the compiler.  If you want to be part of it and be notified
about things to do, just &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/ice-breaker/about.html#join&quot;&gt;add yourself to the list&lt;/a&gt;! When we come across a suitable
bug, we'll write a message that &lt;code&gt;@&lt;/code&gt;-mentions every Github user on that
team. If you have some time, maybe you can provide some useful
information.&lt;/p&gt;
&lt;p&gt;You can find more information about the group on it's &lt;a href=&quot;https://rust-lang.github.io/rustc-guide/ice-breaker/cleanup-crew.html&quot;&gt;rustc-guide
section&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Santiago Pastorino</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/24/upcoming-compiler-team-design-meetings.html">&lt;p&gt;In our &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/planning.20meeting.202019.2E01.2E17&quot;&gt;planning meeting on January 17&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Feb 7th (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=Mmk4NmZqaWVtcHVmZDRmanZob3ZrMXJ1N28gNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/237&quot;&gt;rust-lang/compiler-team#237&lt;/a&gt;, which describes some potential ways
to extract a Rust parser that can be shared between rustc and
rust-analyzer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>February Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html" type="text/html" title="February Lang Team Design Meetings" />
        <published>2020-01-24T00:00:00Z</published>
        <updated>2020-01-24T00:00:01Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/24/feb-lang-team-design-meetings.html">&lt;p&gt;We've scheduled our &lt;strong&gt;language team design meetings&lt;/strong&gt; for February. The current plans are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;February 3rd -- we will do an overview of &lt;strong&gt;specialization&lt;/strong&gt;. We'll cover details from the RFC but in particular talk about the &lt;a href=&quot;http://aturon.github.io/tech/2018/04/05/sound-specialization/&quot;&gt;as-yet-unimplemented plans to make it sound&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 10th -- we will cover interactions between the &lt;code&gt;&amp;amp;T&lt;/code&gt; type and LLVM's dereferenceable attribute, such as &lt;a href=&quot;https://github.com/rust-lang/rust/issues/55005&quot;&gt;rust-lang/rust#55005&lt;/a&gt; and &lt;a href=&quot;https://github.com/japaric/volatile-register/issues/10&quot;&gt;problems modeling MMIO&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;February 17th -- no meeting, it is President's Day in the US and many of us are absent&lt;/li&gt;
&lt;li&gt;February 24th -- we will summarize discussions from &lt;a href=&quot;https://github.com/rust-lang/project-ffi-unwind&quot;&gt;the ffi-unwind project group&lt;/a&gt; about whether we should permit foreign exceptions to propagate across the &amp;quot;C&amp;quot; ABI boundary, or establish a separate ABI (e.g., &amp;quot;C unwind&amp;quot;) for such cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#about-the-language-team-design-meetings&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;about-the-language-team-design-meetings&quot;&gt;&lt;/a&gt;About the language team design meetings&lt;/h2&gt;
&lt;p&gt;The idea of the design meeting is that it's a time for us to have
in-depth discussions on some particular topic. This might be a burning
problem that we've discovered, an update on some existing design work,
or a forward looking proposal.&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They are
typically also recorded and posted online, along with minutes, after
the fact. They generally take place on Mondays at &amp;quot;noon Boston time&amp;quot;
-- but for the precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team
calendar&lt;/a&gt;. Scheduled meetings are subject to change and
cancelation. In that case, the calendar events will be updated.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html" type="text/html" title="cargo-audit v0.11: Introducing the `fix` feature, yanked crate detection, and more" />
        <published>2020-01-23T00:00:00Z</published>
        <updated>2020-01-23T00:00:00Z</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/01/23/Introducing-cargo-audit-fix-and-more.html">&lt;p&gt;&lt;a href=&quot;https://github.com/rustsec/cargo-audit&quot;&gt;cargo-audit&lt;/a&gt; is a command-line utility which inspects &lt;code&gt;Cargo.lock&lt;/code&gt; files and compares them against the &lt;a href=&quot;https://rustsec.org&quot;&gt;RustSec Advisory Database&lt;/a&gt;, a community database of security vulnerabilities maintained by the &lt;a href=&quot;https://github.com/rust-secure-code/wg&quot;&gt;Rust Secure Code Working Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post describes the new features in the 0.11 release of &lt;code&gt;cargo-audit&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#cargo-audit-fix-automatically-update-vulnerable-dependencies&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;cargo-audit-fix-automatically-update-vulnerable-dependencies&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo audit fix&lt;/code&gt;: automatically update vulnerable dependencies&lt;/h2&gt;
&lt;p&gt;One of our &lt;a href=&quot;https://github.com/RustSec/cargo-audit/issues/23&quot;&gt;most requested features&lt;/a&gt; (especially by fans of the similar &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;&lt;code&gt;npm audit fix&lt;/code&gt;&lt;/a&gt; command), the &lt;a href=&quot;https://github.com/RustSec/cargo-audit#cargo-audit-fix-subcommand&quot;&gt;new &lt;code&gt;cargo audit fix&lt;/code&gt; subcommand&lt;/a&gt; will attempt to automatically update version requirements for vulnerable dependencies to non-vulnerable versions.&lt;/p&gt;
&lt;p&gt;Note that this is an experimental new feature which isn't enabled by default. To try it out, install &lt;code&gt;cargo-audit&lt;/code&gt; with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo install cargo-audit --features=fix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will perform the same audit process as &lt;code&gt;cargo audit&lt;/code&gt; initially, and then attempt to apply fixes to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/RustSec/cargo-audit/c857beb/img/screenshot-fix.png&quot; alt=&quot;cargo audit fix screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Under the hood, it uses &lt;a href=&quot;https://github.com/killercup/cargo-edit&quot;&gt;cargo-edit&lt;/a&gt; (as a library) to perform modifications to your &lt;code&gt;Cargo.toml&lt;/code&gt; file, using the fixed version requirements listed in the advisory to try to perform an automatic upgrade to a non-vulnerable version of a dependency for each advisory.&lt;/p&gt;
&lt;p&gt;Note once more that this is a &lt;em&gt;new, experimental feature&lt;/em&gt; and as such it's bound to have bugs. If you're worried, you can use &lt;code&gt;cargo audit fix --dry-run&lt;/code&gt; to perform a dry run only. And if you do encounter bugs, please &lt;a href=&quot;https://github.com/rustsec/cargo-audit/issues&quot;&gt;file a bug report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'd like to thank Reza Fatahi and Hanif Ariffin for their work in contributing this feature.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#warnings-for-yanked-crates&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;warnings-for-yanked-crates&quot;&gt;&lt;/a&gt;Warnings for yanked crates&lt;/h2&gt;
&lt;p&gt;As you can see in the screenshot above, &lt;code&gt;cargo audit&lt;/code&gt; now checks each of the crates in your &lt;code&gt;Cargo.lock&lt;/code&gt; file against the &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; index to determine if any of them have been yanked. If they have, it will emit a warning as per above.&lt;/p&gt;
&lt;p&gt;If you'd like for yanked crates to be a hard failure, you can run &lt;code&gt;cargo audit&lt;/code&gt; with the &lt;code&gt;-D&lt;/code&gt; command-line argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit -D
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you prefer to be more explicit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo audit --deny-warnings
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;compatibility-with-the-new-v2&quot;-format-for-cargo.lock&quot;&gt;&lt;/a&gt;Compatibility with the new &amp;quot;V2&amp;quot; format for &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Rust 1.39 shipped support for a new &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/7070&quot;&gt;merge-friendly &lt;code&gt;Cargo.lock&lt;/code&gt; format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo audit&lt;/code&gt; consumes &lt;code&gt;Cargo.lock&lt;/code&gt; directly, and while the V2 format change didn't break the core vulnerability-auditing functionality of &lt;code&gt;cargo audit&lt;/code&gt;, several minor features regressed because of this, such as displaying dependency trees for vulnerable dependencies.&lt;/p&gt;
&lt;p&gt;This release also upgrades to version 4.0 of the &lt;a href=&quot;https://github.com/RustSec/cargo-lock&quot;&gt;&lt;code&gt;cargo-lock&lt;/code&gt; crate&lt;/a&gt;, which includes full support for the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format and constructs a representation of a lockfile which is the same across the V1 and V2 formats.&lt;/p&gt;
&lt;p&gt;If you noticed dependency trees failing to display after upgrading to the V2 &lt;code&gt;Cargo.lock&lt;/code&gt; format, they should now be working again!&lt;/p&gt;
&lt;p&gt;Thanks for reading, and we hope you enjoy &lt;code&gt;cargo-audit&lt;/code&gt; 0.11!&lt;/p&gt;
</content>

        <author>
            <name>Tony Arcieri</name>
        </author>
    </entry>
    
</feed>
